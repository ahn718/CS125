import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

/**
 * A class that prints lines for a given actress from a script.
 * <p>
 * The provided code is incomplete. Modify it so that it works properly and passes the unit tests in
 * <code>ScriptPrinterTest.java</code>.
 *
 * @see <a href="https://cs125.cs.illinois.edu/MP/2/">MP2 Documentation</a>
 */
public class ScriptPrinter {

    /**
     * Script file that we use for interactive testing. Not necessarily the same as the files used
     * during automated testing.
     */
    private static final String INTERACTIVE_SCRIPT_FILE = "Rent.txt";

    /**
     * Prints lines from a script for a given actress (or actor).
     * <p>
     * Given a script formatted like "Rent-Excerpt.txt" and "Rent.txt", print all lines for a given
     * actress in the following format. For example, if the search term is "Roger" or "roger":
     *
     * <pre>
     * ROGER
     * ---
     * This won't tune.
     * ---
     * Are you talking to me?
     * ---
     * I'm writing one great song --
     * ---
     * </pre>
     *
     * <p>
     * Etc. Here are the guidelines:
     * <ol>
     * <li>You should print the name of the actress capitalized first on a single line. But only
     * once.</li>
     * <li>Groups of lines are separated by "---". Put another way, once another character begins
     * speaking, print the "---" divider. Your output should also end with a "---".</li>
     * <li>Do not print unspoken stage directions: these lines start with "(". * For example, this
     * is a stage direction:
     *
     * <pre>
     * (He turns the camera to ROGER)
     * </pre>
     *
     * </li>
     * <li>If you are asked to search for lines for an actress that does not exist, you should print
     * nothing: not their name, not any "---" separators.</li>
     * </ol>
     * <p>
     * Complete the Javadoc comment and write this function.
     */

    /**
     *
     * @param actress name of the actress
     * @param script String containing all of the script
     */
    public static void printLinesFor(final String actress, final String script) {
        String filteredActress = actress.toLowerCase();
        String[] lines = script.split("\r\n|\r|\n");
        final String endOfFile = "END OF FILE";
        boolean run = false;
        int beginIndex = 0;
        boolean loopFlag = true;
        boolean heading = true;

        while (loopFlag) {
            for (int r = beginIndex; r < lines.length; r++) {
                String temp = lines[r];

                if ((temp.toLowerCase().equals(filteredActress) && isUpperCase(temp))
                        || (temp.toLowerCase().indexOf(filteredActress) == 0
                                && Character.isUpperCase(temp.charAt(2))
                                && temp.contains("(") && temp.contains(")"))) {
                    if (heading) {
                        System.out.println(actress.toUpperCase());
                        System.out.println("---");
                        heading = false;
                    }
                    beginIndex = r;
                    run = true;
                    // System.out.println(lines[r]); // for actress labels
                    break;
                }
                if (r == lines.length - 1) {
                    loopFlag = false;
                    break;
                }
            }

            if (run) {
                for (int i = beginIndex + 1; i < lines.length; i++) {
                    String temp = lines[i];
                    String next = "";
                    if (i < lines.length - 1) {
                        next = lines[i + 1];
                    } else {
                        next = endOfFile;
                    }

                    if (temp.length() > 1 && temp.charAt(0) == '(') {
                        i = removeStageDirections(i, lines);
                        temp = lines[i];
                        next = lines[i + 1];
                    }

                    if (temp.length() > 1) {
                        System.out.println(temp);
                    }

                    if (next.length() > 1 && next.charAt(0) == '(') {
                        i = removeStageDirections(i, lines);
                        temp = lines[i];
                        next = lines[i + 1];
                    }
                    if (next.toLowerCase().equals(filteredActress)) {
                        i++;
                    }

                    if (next.length() > 1 && ((!next.toLowerCase().equals(filteredActress)
                            && (isUpperCase(next) || next.equals(endOfFile)))
                            || (next.length() > 2 && Character.isUpperCase(next.charAt(2))
                                    && next.contains("(") && next.contains(")")))) {

                        // System.out.println("BREAK AT: " + next); //For break debugging
                        System.out.println("---");

                        run = false;
                        beginIndex++;
                        break;
                    }
                }
            }

        }

    }

    /**
     *
     * @param string string that is checked for uppercase
     * @return result
     */
    public static boolean isUpperCase(final String string) {
        char[] c = string.toCharArray();
        if (c.length <= 1) {
            return false;
        }
        for (char character : c) {
            if (Character.isLowerCase(character)) {
                return false;
            }
        }
        return true;
    }

    /**
     *
     * @param beginIndex index of the starting line of stage directions in array
     * @param lines array of lines
     * @return new index for loop
     */
    public static int removeStageDirections(final int beginIndex, final String[] lines) {
        int newIndex = beginIndex;
        for (int i = beginIndex; i < lines.length; i++) {
            String temp = lines[i];
            if (temp.length() > 1 && temp.charAt(temp.length() - 1) == ')') {
                newIndex = i + 1;
                // System.out.println("NEW INDEX: " + newIndex);
                break;
            }
        }
        return newIndex;
    }

    /**********************************************************************************************
     * You do not need to modify code below this comment.
     **********************************************************************************************/

    /**
     * Solicits a single name from the user at the command line and searches for it in an exceprt
     * from Rent (Rent-Excerpt.txt).
     * <p>
     * You are free to review this function, but should not modify it. Note that this function is
     * not tested by the test suite, as it is purely to aid your own interactive testing.
     *
     * @param unused unused input arguments
     * @throws FileNotFoundException exception if the text file cannot be located
     */
    public static void main(final String[] unused) throws FileNotFoundException {

        String inputPrompt = String.format("Enter the name of an actress to print lines for:");
        Scanner lineScanner = new Scanner(System.in);

        while (true) {
            String actressName = null;
            System.out.println(inputPrompt);

            /*
             * We could just use lineScanner.hasNextInt() and not initialize a separate scanner. But
             * the default Scanner class ignores blank lines and continues to search for input until
             * a non-empty line is entered. This approach allows us to detect empty lines and remind
             * the user to provide a valid input.
             */
            String nextLine = lineScanner.nextLine();
            Scanner inputScanner = new Scanner(nextLine);
            if (!(inputScanner.hasNext())) {
                /*
                 * These should be printed as errors using System.err.println. Unfortunately,
                 * Eclipse can't keep System.out and System.err ordered properly.
                 */
                System.out.println("Invalid input: please enter an single name.");
                continue;
            }
            actressName = inputScanner.next();
            /*
             * If the line started with a string but contains other tokens, reinitialize userInput
             * and prompt the user again.
             */
            if (inputScanner.hasNext()) {
                System.out.println("Invalid input: please enter only a single name.");
                continue;
            }
            inputScanner.close();

            ClassLoader classLoader = ScriptPrinter.class.getClassLoader();
            File rentExcerptFile = new File(
                    classLoader.getResource(INTERACTIVE_SCRIPT_FILE).getFile());

            Scanner rentExcerptScanner = new Scanner(rentExcerptFile, "UTF-8");
            String rentExcerpt = rentExcerptScanner.useDelimiter("\\A").next();
            rentExcerptScanner.close();

            printLinesFor(actressName, rentExcerpt);
            break;
        }
        lineScanner.close();
    }
}
